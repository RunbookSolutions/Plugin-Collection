{
  "id": "9acb0de9-bdbd-40ba-a45e-dba0fcce51b7",
  "name": "simple-network-scan",
  "version": "v0.0.1",
  "description": "Simple NMAP Network Scanning Plugin",
  "script": "import nmap\nimport time\nimport logging\nfrom runbooksolutions.agent.API import API\n\nclass Plugin:\n    provided_network: dict = {}\n    networks: list = []\n\n    def __init__(self, api: API) -> None:\n        self.api = api\n\n    def scan_network(self, network_id: str, scan_arguments: str = \"-sn\") -> str:\n        start_time = time.time()\n        self.provided_networks = self.getNetworkByID(network_id)\n        \n        # Return if we can't find the provided network ID\n        if self.provided_networks is None:\n            logging.critical(f\"Unable to find network {network_id}.\")\n            return f\"Unable to find network {network_id}.\"\n\n        # Get the Networks we will be scanning in the event the network provided has subnets.\n        self.networks = self.getNetworksToScan(self.provided_networks)\n        logging.debug(f\"Networks To Process: {[network.get('network') for network in self.networks]}\")\n\n        # Scan Each Network\n        for network in self.networks:\n            logging.debug(f\"Scanning: {network.get('network')}\")\n            scan_results = self.preformScan(network, scan_arguments)\n            logging.debug(f\"Scan Results: {scan_results}\")\n\n            self.processNowOfflineAddresses(scan_results, network)\n\n            for result in scan_results:\n                self.processScanResult(result, network, self.provided_networks)\n        \n        return f\"Scan Completed in {time.time() - start_time} seconds\"\n\n    def processNowOfflineAddresses(self, results: list, network: dict) -> None:\n        UpAddresses = [address.get('address') for address in results]\n        for address_data in network.get('addresses'):\n            if address_data.get('address') not in UpAddresses and address_data.get('status') == \"online\":\n                self.updateAddressStatus(address_data.get('id'), \"offline\")\n                logging.debug(f\"Address {address_data.get('address')} is now Down!\")\n\n\n    # {'address': '192.168.1.1', 'status': 'up', 'hostname': None, 'source': {'id': '9acb0f52-1bdd-4f7b-8706-20a073447866', 'address': '192.168.1.1', 'devices': [], 'status': 'online'}}\n    def processScanResult(self, result: dict, network: dict, primary_network: dict) -> None:\n        # Ensure we were given the origional source address information\n        source = result.get('source')\n        if source is None:\n            logging.critical(f\"Source Not Provided! {result}\")\n            return\n\n        # Does an Address Status Change Need to Happen?\n        if result.get('status') == \"up\" and source.get('status') == \"offline\":\n            self.updateAddressStatus(source.get('id'), 'online')\n\n        # Result is offline Return\n        if result.get('status') == \"down\":\n            return\n\n        scan_hostname = result.get('hostname')\n        source_devices = source.get('devices')\n\n        if source_devices is not None:\n            # Generate Temp so we can pre-search for hostname and non-hostname results\n            temp = scan_hostname if scan_hostname else 'DEVICE_' + result.get('address')\n            for device in source_devices:\n                # We already have the device with a matching name\n                if device.get(\"name\") == temp:\n                    logging.debug(f\"Device is Good! {temp}\")\n                    return\n                # We already have the device with a matching hostname\n                if device.get(\"hostname\") == temp:\n                    logging.debug(f\"Device is Good! {temp}\")\n                    return\n\n                # Check if we have an existing Temp Device that should have its name updated\n                if temp != 'DEVICE_' + result.get('address'):\n                    if device.get(\"name\") == 'DEVICE_' + result.get('address'):\n                        logging.info(\"Updating Device with new hostname\")\n                        self.UpdateDeviceName(device.get(\"id\"), temp)\n                        return\n\n        # If we don't have a provided hostname\n        if scan_hostname is None:\n            logging.error(f\"No Hostname Found! {result.get('address')}\")\n            \n            name = 'DEVICE_' + result.get('address')\n            # Check if there is already a place holder...\n            device = self.getDeviceByName(name)\n            if device is None:\n                logging.debug(\"Creating Stand-in Device\")\n                result = self.CreateDevice(name, None, result.get('source').get('id'), network.get('id'))\n            # Return we are done processing this result\n            return\n\n        # We have a hostname\n        logging.debug(f\"Find or Create Hostname {result.get('hostname')}\")\n        device = self.getDeviceByHostName(result.get('hostname'))\n        if device is None:\n            result = self.CreateDevice(result.get('hostname'), result.get('hostname'), result.get('source').get('id'), network.get('id'))\n            if result is None:\n                logging.error(f\"Error Creating Device {result}\")\n                return\n        else:\n            self.UpdateDevice(device.get('id'), result.get('source').get('id'))\n            logging.info(\"Link Existing Device\")\n            return\n\n\n    def preformScan(self, network: dict, scan_arguments: str) -> dict:\n        nm = nmap.PortScanner()\n        nm.scan(hosts=network.get('network'), arguments=scan_arguments)\n\n        results = []\n\n        for address in nm.all_hosts():\n            result = {\n                \"address\": address,\n                \"status\": nm[address].state(),\n                \"hostname\": nm[address].hostname() or None\n            }\n            for network_address in network.get('addresses', []):\n              if network_address.get('address') == address:\n                  result[\"source\"] = network_address\n                  break\n            results.append(result)\n\n        return results\n    \n    def getNetworksToScan(self, network: dict) -> list:\n        networks = []\n        if network.get('subnets'):\n            for subnet in network.get('subnets'):\n              networks.append(self.getNetworkByID(subnet.get('id')))\n        else:\n            networks.append(network)\n        return networks\n\n    def getNetworkByID(self, network_id: str) -> dict | None:\n        response = self.api.graphQL(self.GET_NETWORK_INFO_QUERY, {'id': network_id})\n        if not response or not response.get('data', {}).get('core', {}).get('network', {}).get('single'):\n            return None\n        return response['data']['core']['network']['single']\n\n    def getDeviceByHostName(self, hostname: str) -> dict | None:\n        response = self.api.graphQL(self.LIST_DEVICE_BY_HOSTNAME_QUERY, {'hostname': hostname})\n        if not response or not response.get('data', {}).get('core', {}).get('device', {}).get('single'):\n            return None\n        return response['data']['core']['device']['single']\n\n    def getDeviceByName(self, hostname: str) -> dict | None:\n        response = self.api.graphQL(self.LIST_DEVICE_BY_NAME_QUERY, {'name': hostname})\n        if not response or not response.get('data', {}).get('core', {}).get('device', {}).get('single'):\n            return None\n        return response['data']['core']['device']['single']\n\n    def UpdateDeviceName(self, device_id: str, hostname: str) -> None:\n        response = self.api.graphQL(self.UPDATE_DEVICE_MUTATION, \n        {\n            'input': {\n                'id': device_id,\n                'name': hostname,\n                'hostname': hostname,\n            }\n        })\n        if not response or not response.get('data', {}).get('core', {}).get('device', {}).get('update'):\n            return None\n        return response['data']['core']['device']['update']\n\n    def UpdateDevice(self, device_id: str, address_id: str) -> None:\n        response = self.api.graphQL(self.UPDATE_DEVICE_MUTATION, \n        {\n            'input': {\n                'id': device_id,\n                'addresses': {\n                    'connect': [address_id],\n                },\n            }\n        })\n        if not response or not response.get('data', {}).get('core', {}).get('device', {}).get('update'):\n            return None\n        return response['data']['core']['device']['update']\n\n    def CreateDevice(self,name: str, hostname: str | None, address_id: str, network_id: str) -> dict | None:\n        \n        response = self.api.graphQL(self.CREATE_DEVICE_MUTATION, \n        {\n            'input': {\n                'name': name,\n                'hostname': hostname,\n                'description': 'Created By NMAP Scan Plugin',\n                'type': 'other',\n                'addresses': {\n                    'connect': [address_id],\n                },\n            }\n        })\n        if not response or not response.get('data', {}).get('core', {}).get('device', {}).get('create'):\n            return None\n        return response['data']['core']['device']['create']\n    \n    def updateAddressStatus(self, address_id: str, status: str) -> dict | None:\n        response = self.api.graphQL(self.UPDATE_ADDRESS_STATUS_MUTATION, \n        {\n            'input': {\n                'id': address_id,\n                'status': status,\n            }\n        })\n        if not response or not response.get('data', {}).get('core', {}).get('networks', {}).get('addresses', {}).get('update'):\n            return None\n        return response['data']['core']['networks']['addresses']['update']\n\n    GET_NETWORK_INFO_QUERY = \"\"\"\n        query GetNetworkInfo($id: ID = \"\") {\n            core {\n                network {\n                    single(id: $id) {\n                        id\n                        mask\n                        network\n                        addresses {\n                            id\n                            address\n                            devices {\n                                id\n                                name\n                                hostname\n                                type\n                            }\n                            status\n                        }\n                        subnets {\n                            id\n                        }\n                        devices {\n                            id\n                            name\n                            type\n                        }\n                    }\n                }\n            }\n        }\n    \"\"\"\n\n    UPDATE_ADDRESS_STATUS_MUTATION = \"\"\"\n        mutation UpdateAddressStatus($input: CoreNetworksAddressUpdateInput) {\n            core {\n                networks {\n                    address {\n                        update(input: $input) {\n                            id\n                            status\n                        }\n                    }\n                }\n            }\n        }\n    \"\"\"\n\n    LIST_DEVICE_BY_HOSTNAME_QUERY = \"\"\"\n        query ListDeviceByName($hostname: String!) {\n            core {\n                device {\n                    single(hostname: $hostname) {\n                        id\n                        name\n                        hostname\n                        type\n                    }\n                }\n            }\n        }\n    \"\"\"\n\n    LIST_DEVICE_BY_NAME_QUERY = \"\"\"\n        query ListDeviceByName($name: String!) {\n            core {\n                device {\n                    single(name: $name) {\n                        id\n                        name\n                        hostname\n                        type\n                    }\n                }\n            }\n        }\n    \"\"\"\n\n    CREATE_DEVICE_MUTATION = \"\"\"\n        mutation CreateDevice($input: CoreDeviceCreateInput!) {\n            core {\n                device {\n                    create(input: $input) {\n                        id\n                    }\n                }\n            }\n        }\n    \"\"\"\n\n    UPDATE_DEVICE_MUTATION = \"\"\"\n        mutation UpdateDevice($input: CoreDeviceUpdateInput!) {\n            core {\n                device {\n                    update(input: $input) {\n                        id\n                    }\n                }\n            }\n        }\n    \"\"\"",
  "hash": "2460a398d69d437d611d3086aee11f22b7b7b0db1ba5e97f5127f16dc44c1cd6e8848f0617c11155df5711691c8dee08c481fa22b2b8b529fd8bd548510b53d1",
  "commands": {
    "9acb0de9-bdbd-40ba-a45e-dba0fcce51b7.NetworkScan": {
      "id": "9acb0de9-be6a-4694-850d-25dea0ae8bc6",
      "name": "9acb0de9-bdbd-40ba-a45e-dba0fcce51b7.NetworkScan",
      "function": "scan_network"
    }
  }
}
